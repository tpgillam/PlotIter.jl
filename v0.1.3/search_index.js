var documenterSearchIndex = {"docs":
[{"location":"#PlotIter","page":"Home","title":"PlotIter","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"API documentation for PlotIter.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For usage examples, please see the example notebook.","category":"page"},{"location":"#Plotting-things-from-an-iterable","page":"Home","title":"Plotting things from an iterable","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"plot_iter\nNoDisplay \nDisplayEachRow\nDisplayAtEnd","category":"page"},{"location":"#PlotIter.plot_iter","page":"Home","title":"PlotIter.plot_iter","text":"plot_iter(f::Function, iterable; kwargs...)\n\nGenerate one plot per item of iterable.\n\nThis function will call f for each item in iterable, with a new plot set as Plots.current().\n\nIt is optimised for use within a Jupyter notebook. It will let you quickly generate a number of plots, making use of the available page width. The plots are then close together, so easier to compare visually.\n\nThis function avoids the need to manually construct a layout for this simple case.\n\nArguments\n\nf::Function: A function that takes a single argument of type eltype(iterable). Any   return value is ignored.\niterable: Any iterable object.\n\nKeyword arguments\n\nnum_cols::Integer=3: The number of of plots to put side-by-side.\nrow_width=900: The width of each row (that is for all plots in the row)\nrow_height=300: The vertical extent of each plot.\ndisplay_mode::DisplayMode=DisplayAtEnd(): An instance of:\nNoDisplay: Don't show the plots.\nDisplayEachRow: Every time a row of plots is complete, show it.\nDisplayAtEnd: Wait until all plots are generated, and then show all at once.\nxlims_convex_hull::Bool=false: Iff true, call xlims_convex_hull! on all plots.   This requires the display_mode to be NoDisplay or DisplayAtEnd.\nylims_convex_hull::Bool=false: Iff true, call ylims_convex_hull! on all plots.   This requires the display_mode to be NoDisplay or DisplayAtEnd.\nzlims_convex_hull::Bool=false: Iff true, call zlims_convex_hull! on all plots.   This requires the display_mode to be NoDisplay or DisplayAtEnd.\nclims_convex_hull::Bool=false: Iff true, call clims_convex_hull! on all plots.   This requires the display_mode to be NoDisplay or DisplayAtEnd.\nkwargs...: Any other keyword arguments specified will be forwarded to an initial call to   plot.\n\nReturns\n\nA vector of all plots that have been generated.\n\nExample\n\nHere is the simplest use, with no configuration:\n\nplot_iter(1:3) do i\n    # Note: call to `plot!` rather than `plot` is important, since a new plot object has\n    # already been created by `plot_iter`.\n    plot!(i .* rand(30))\nend;\n\nWe can also change the sizes, as well as make the y-axis limits match:\n\nplot_iter(1:3; num_cols=2, row_height=500, ylims_convex_hull=true) do i\n    plot!(i .* rand(30))\nend;\n\n\n\n\n\n","category":"function"},{"location":"#PlotIter.NoDisplay","page":"Home","title":"PlotIter.NoDisplay","text":"struct NoDisplay <: DisplayMode\n\nDon't show any plots.\n\n\n\n\n\n","category":"type"},{"location":"#PlotIter.DisplayEachRow","page":"Home","title":"PlotIter.DisplayEachRow","text":"struct DisplayEachRow <: DisplayMode\n\nShow a row of plots as soon as it is complete.\n\n\n\n\n\n","category":"type"},{"location":"#PlotIter.DisplayAtEnd","page":"Home","title":"PlotIter.DisplayAtEnd","text":"struct DisplayAtEnd <: DisplayMode\n\nWait until the iterable is exhausted, and then show all rows of plots.\n\n\n\n\n\n","category":"type"},{"location":"#Axis-limits","page":"Home","title":"Axis limits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"These functions are used internally by plot_iter, but they can also be useful standalone.","category":"page"},{"location":"","page":"Home","title":"Home","text":"xlims_convex_hull!\nylims_convex_hull!\nzlims_convex_hull!\nclims_convex_hull!","category":"page"},{"location":"#PlotIter.xlims_convex_hull!","page":"Home","title":"PlotIter.xlims_convex_hull!","text":"xlims_convex_hull!(plots)\nxlims_convex_hull!(plots...)\n\nSet the x-axis limits for all plots to the smallest interval that contains all the existing x-axis limits.\n\nThis is useful to ensure that two plots are visually comparable.\n\n\n\n\n\n","category":"function"},{"location":"#PlotIter.ylims_convex_hull!","page":"Home","title":"PlotIter.ylims_convex_hull!","text":"ylims_convex_hull!(plots)\nylims_convex_hull!(plots...)\n\nSet the y-axis limits for all plots to the smallest interval that contains all the existing y-axis limits.\n\nThis is useful to ensure that two plots are visually comparable.\n\n\n\n\n\n","category":"function"},{"location":"#PlotIter.zlims_convex_hull!","page":"Home","title":"PlotIter.zlims_convex_hull!","text":"zlims_convex_hull!(plots)\nzlims_convex_hull!(plots...)\n\nSet the z-axis limits for all plots to the smallest interval that contains all the existing z-axis limits.\n\nThis is useful to ensure that two plots are visually comparable.\n\n\n\n\n\n","category":"function"},{"location":"#PlotIter.clims_convex_hull!","page":"Home","title":"PlotIter.clims_convex_hull!","text":"clims_convex_hull!(plots)\nclims_convex_hull!(plots...)\n\nSet the c-axis limits for all plots to the smallest interval that contains all the existing c-axis limits.\n\nThis is useful to ensure that two plots are visually comparable.\n\n\n\n\n\n","category":"function"}]
}
